#!/bin/bash
#
# Testsuite for the Linux SPU filesystem
#
# Copyright (C) IBM Corporation, 2007
#
# Author: Jeremy Kerr <jk@ozlabs.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

test_basedir=test-output.$(date +"%Y%m%d%H%M%S")
test_outfile=test.out

function pass() {
	echo "PASS"
}

function fail() {
	echo "FAIL ($1)"

	# show output, if there is any
	if [ -s "$test_basedir/$test_outfile" ]
	then
		echo "test output:"
		sed -e 's/^/> /' "$test_basedir/$test_outfile"
	fi

	# abort if we weren't started with the -c option
	if [ $cont -eq 0 ]
	then
		exit 1
	fi
}

function skip() {
	echo "SKIPPED ($1)"
}

# functions to to some simple testing on kernel logs
dmesg_filter='grep Badness'
dmesg_file="$test_basedir/dmesg.orig"

function check_dmesg() {
	mv "$dmesg_file" "$dmesg_file.orig"
	dmesg | $dmesg_filter > "$dmesg_file"
	cmp -s "$dmesg_file.orig" "$dmesg_file" &>/dev/null
}
function init_dmesg() {
	dmesg | $dmesg_filter > "$dmesg_file"
}

# flag to continue on test failures
cont=0
# run benchmarks ?
benchmark=0

while getopts cb opt;
do
	case "$opt" in
	c)
		cont=1
		;;
	b)
		benchmark=1
		;;
	esac
	echo $opt
done

shift $(($OPTIND - 1))

mkdir "$test_basedir" || exit 1

init_dmesg

if [ ${#@} -gt 0 ]
then
	t_dir="$@"
else
	t_dir="tests"
fi
b_dir="benchmarks"

find $t_dir -type f -perm /0111 -name '[0-9]*' | sort |
while read test
do
	printf "%-45s" "${test#tests/}"

	testname=$(basename "$test")
	testdir=$(dirname "$test")
	testconfig="$testdir/tests.conf"

	# set default options
	expected_rc=0
	needs_root=0
	disabled=0
	timeout=10

	# read options for this test, if present
	if [ -e $testconfig ]
	then
		sed_expr='s/^'"$testname"': \(.*\)/\1;/p'
		eval $(sed -ne "$sed_expr" "$testconfig")
	fi

	if [ $disabled -ne 0 ]
	then
		skip "disabled"
		continue
	fi

	if [ $needs_root -ne 0 ] && [ $UID -ne 0 ]
	then
		skip "needs root privs"
		continue
	fi

	test_wd="$test_basedir/$testdir"
	rsync -a "$testdir" "$test_basedir/tests"

	# run the test in a new session
	setsid sh -c "cd '$test_wd' && './$testname' \
		> '../../$test_outfile' 2>&1" &
	testgrp=$!

	# send a SIGALRM after $timeout seconds
	# trap 'exit 0 HUP'
	setsid sh -c "trap 'exit 0' HUP; sleep $timeout; kill -ALRM -$testgrp" \
		>/dev/null 2>&1 &
	alrmgrp=$!

	wait $testgrp
	rc=$?

	kill -HUP -$alrmgrp 2>/dev/null

	if [ $rc -eq 142 -a $expected_rc -ne 142 ]
	then
		fail "timeout"
		continue
	fi

	if [ $rc -ne $expected_rc ]
	then
		fail "exit status. expected $expected_rc, got $rc"
		continue
	fi

	if ! check_dmesg
	then
		fail "dmesg"
		continue
	fi

	pass
done

rc=$?

[ "$rc" -ne 0 -o "$benchmark" -ne 1 ] && exit $rc

echo '--- Running benchmarks'

find $b_dir -type f -perm /0111 -name '[0-9]*' | sort |
while read benchmark;
do
	printf "%-45s" "${benchmark#benchmarks/}"

	$benchmark
done
